import { defineConfig } from 'cypress';
import dotenv from 'dotenv';
import allureWriter from '@shelex/cypress-allure-plugin/writer';
dotenv.config(); // permite ler variÃ¡veis do .env local

export default defineConfig({
  e2e: {
    // ğŸ”¹ URL base da API ou aplicaÃ§Ã£o testada
    baseUrl: process.env.CYPRESS_BASE_URL || 'https://serverest.dev',

    // ğŸ”¹ Caminho dos testes (permite organizaÃ§Ã£o por pastas)
    specPattern: 'cypress/e2e/**/*.cy.{js,jsx,ts,tsx}',

    // ğŸ”¹ Arquivo de suporte global (hooks, comandos, plugins)
    supportFile: 'cypress/support/e2e.js',

    // ğŸ”¹ Desabilita vÃ­deos (Ã³timo para pipelines de API)
    video: false,

    // ğŸ”¹ Timeouts padrÃ£o â€” mantidos em nÃ­vel profissional
    defaultCommandTimeout: 10000,
    requestTimeout: 10000,
    responseTimeout: 10000,

    // ğŸ”¹ Retries em caso de falha (Ãºtil para endpoints instÃ¡veis)
    retries: {
      runMode: 1, // em execuÃ§Ã£o headless
      openMode: 0 // em modo interativo
    },

    // ğŸ”¹ ConfiguraÃ§Ãµes de viewport (consistÃªncia)
    viewportWidth: 1280,
    viewportHeight: 720,

    // ğŸ”¹ VariÃ¡veis de ambiente customizadas
    env: {
      allure: true, // ativa Allure se estiver usando
      allureResultsPath: 'reports/allure-results',
      allureLogCypress: true,
      apiTimeout: 10000,
      defaultUserEmail: process.env.CYPRESS_USER_EMAIL,
      defaultUserPassword: process.env.CYPRESS_USER_PASSWORD
    },

    // ğŸ”¹ Eventos do Node (plugins / relatÃ³rios)
    setupNodeEvents(on, config) {
      // Allure plugin
      allureWriter(on, config);

      // Exemplo: logs customizados de requisiÃ§Ãµes (opcional)
      on('task', {
        log(message) {
          console.log('LOG:', message);
          return null;
        }
      });

      return config;
    }
  },

  // ğŸ”¹ DiretÃ³rios padrÃ£o para artefatos (mantÃ©m organizaÃ§Ã£o)
  screenshotsFolder: 'cypress/screenshots',
  videosFolder: 'cypress/videos',
  downloadsFolder: 'cypress/downloads'
});
